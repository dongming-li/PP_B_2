package com.warscreen.warscreen;

import android.app.ActionBar;
import android.app.ActivityManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ConfigurationInfo;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.opengl.GLSurfaceView;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.PopupMenu;
import android.util.Log;
import android.view.ContextMenu;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.SlidingDrawer;
import android.widget.TextView;
import android.widget.Toast;

<<<<<<< HEAD
import com.android.volley.AuthFailureError;
import com.android.volley.NetworkError;
import com.android.volley.NoConnectionError;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.StringRequest;
import com.warscreen.warscreen.utils.Const;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
=======
import com.warscreen.warscreen.utils.Const;

import java.util.ArrayList;
>>>>>>> 54b6be581de91f0508b8d6cef82bb99bcd128ecd
import java.util.List;
import java.util.Map;

public class MainActivity extends AppCompatActivity {
    //SlidingDrawer from http://abhiandroid.com/ui/slidingdrawer
    String[] nameArray = {"All Attack", "All Fallback", "Chat", "Building Wiki", "Unit Wiki", "Options", "Quit/Surrender"};
    String[] hexArray = {"Recon", "All Move", "Build Unit", "Build Building"};
    //    String[] buildUnitArray = {"A","B","C"};
//    String[] buildBuildingArray = {"BA","BB","BC"};
    Hex firstTouchedHex = null;
    Hex secondTouchedHex = null;
    volatile HexBoardView HexMap;
    PopupWindow pw;
    PopupWindow pw1;
    PopupWindow pw2;
    int hexAction=-1;
    int mainAction=-1;
    int numHexes = 3;
    Thread background;

    private String TAG = MainActivity.class.getSimpleName();
    private String tag_json_obj = "jobj_req", tag_json_arry = "jarray_req";

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        HexMap = (HexBoardView) findViewById(R.id.HexMap);

        LayoutInflater inflater = (LayoutInflater) HexMap.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View popupMenu = inflater.inflate(R.layout.popup_menu, null);
        int width = LinearLayout.LayoutParams.WRAP_CONTENT;
        int height = LinearLayout.LayoutParams.WRAP_CONTENT;
        boolean focusable = true;
        pw = new PopupWindow(popupMenu, width, height, focusable);
        ListView lv = (ListView) popupMenu.findViewById(R.id.HexList);
        ArrayAdapter<String> aa = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_item, R.id.name, hexArray);
        lv.setAdapter(aa);
        lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                int pos=position;
                switch(pos){
                    case 0: //Recon
                        LayoutInflater inflater = (LayoutInflater) HexMap.getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                        View reconInfo = inflater.inflate(R.layout.popup_menu, null);
                        int width = LinearLayout.LayoutParams.WRAP_CONTENT;
                        int height = LinearLayout.LayoutParams.WRAP_CONTENT;
                        boolean focusable = true;
                        pw1 = new PopupWindow(reconInfo, width, height, focusable);
                        ListView lv = (ListView) reconInfo.findViewById(R.id.HexList);
                        String[] info = {"Owner: ","Terrain: ","Manpower: ","Gold: ","Army: "};
                        if(firstTouchedHex.getHexData().get_User()==null){
                            info[0]+="None";
                        }
                        info[1]+="grasslands";
                        info[2]+=Integer.toString(firstTouchedHex.getHexData().get_MPT());
                        info[3]+=Double.toString(firstTouchedHex.getHexData().get_GPT());
                        if(firstTouchedHex.getHexData().get_hex_army()!=null) {
                            info[4] += "Archers: " + Integer.toString(firstTouchedHex.getHexData().get_archers().size()) + "\n Infantry: " + Integer.toString(firstTouchedHex.getHexData().get_swords().size()) + " ,Horses: " + Integer.toString(firstTouchedHex.getHexData().get_horses().size());
                        }
                        else{
                            info[4]+= "None";
                            System.out.println(info[4]);
                        }

                        ArrayAdapter<String> aa = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_item, R.id.name,info);
                        lv.setAdapter(aa);
                        pw1.showAtLocation(HexMap,Gravity.NO_GRAVITY,HexMap.getWidth(),HexMap.getHeight());
                        break;
                    case 1: //Move all
                        hexAction=1;
                        break;
                    case 2: //Build Unit
                        ArrayList<units> ar=new ArrayList<units>(2);
                        ArrayList<units> s=new ArrayList<units>(2);
                        ArrayList<units> h=new ArrayList<units>(2);
                        ar.add(new units("sword","Bob",0,0,0,0,0,0));
                        s.add(new units("archer","Bob1",0,0,0,0,0,0));
                        h.add(new units("horse","Bob2",0,0,0,0,0,0));
                        army a = new army(ar,s,h,firstTouchedHex.getHexData().get_ID(),0);
                        Hex_data newData=firstTouchedHex.getHexData();
                        newData.add_army(a);
                        firstTouchedHex.setHexData(newData);
                        //System.out.println(Integer.toString(firstTouchedHex.getHexData().get_archers().size()));
                        break;
                    case 3: //Build Building

                        break;
                }
                pw.dismiss();
            }
        });

        //Network.ServerThread(HexMap);
        ServerThread();

        SlidingDrawer simpleSlidingDrawer = (SlidingDrawer) findViewById(R.id.simpleSlidingDrawer); // initiate the SlidingDrawer
        final ImageButton handleButton = (ImageButton) findViewById(R.id.handle); // inititate a Button which is used for handling the content of SlidingDrawer
        ListView simpleListView = (ListView) findViewById(R.id.simpleListView); // initiate the ListView that is used for content of Sl.idingDrawer
        // adapter for the list view
        ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(getApplicationContext(), R.layout.list_item, R.id.name, nameArray);
        // set an adapter to fill the data in the ListView
        simpleListView.setAdapter(arrayAdapter);
        simpleListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                switch(position){
                    case 0:
                        mainAction=0;
                        break;
                    case 1:
                        mainAction=1;
                        break;
                    case 2:
                        mainAction=2;
                        break;
                    case 3:
                        mainAction=3;
                        break;
                    case 4:
                        mainAction=4;
                        break;
                    case 5:
                        mainAction=5;
                        break;
                    case 6:
                        finish();
                        break;
                }
            }
        });

        HexMap.setZOrderMediaOverlay(true);
        HexMap.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                boolean inHex = HexMap.onTouchEvent(event);
                if (inHex == true && hexAction==-1) {
                    firstTouchedHex = HexMap.contextInfo.touchedHex;
                  // int a=HexMap.getRenderer().HexBoard.length;
                    pw.showAtLocation(HexMap, Gravity.NO_GRAVITY, (int) event.getX(), (int) event.getY());
                }
                else if(inHex==true && hexAction==1){
                    secondTouchedHex = HexMap.contextInfo.touchedHex;
                    if(hexAction==1){
                        army a =firstTouchedHex.getHexData().get_hex_army();
                        if(a!=null) {
                            secondTouchedHex.getHexData().add_army(a);
                            firstTouchedHex.getHexData().remove_Army();
                        }
                    }
                    hexAction=-1;
                }
                return inHex;
            }
        });
    }


//    public void ServerThread(){
//
//        Toast.makeText(getBaseContext(),
//                "Please wait, connecting to server.",
//                Toast.LENGTH_SHORT).show();
//
//        // Create Inner Thread Class
//        background = new Thread(new Runnable() {
//
//            // Define the Handler that receives messages from the thread and update the progress
//            private final Handler handler = new Handler() {
//
//                public void handleMessage(Message msg) {
//
//                    String aResponse = msg.getData().getString("message");
//                    JSONObject json= null;
//                    System.out.println("what");
////                    try {
////                        //json = new JSONObject(aResponse);
////                        System.out.println("convert json");
////                        //System.out.print(json.toString());
////                    } catch (JSONException e) {
////                        e.printStackTrace();
////                    }
//
//                    if ((null != aResponse)) {
//                        // ALERT MESSAGE
//                        Toast.makeText(
//                                getBaseContext(),
//                                "Server Response: "+aResponse,
//                                Toast.LENGTH_SHORT).show();
//
//                        Hex_data x = HexMap.getRenderer().HexBoard[0].getHexData();
//
//
//                    }
//                    else
//                    {
//                        // ALERT MESSAGE
//                        Toast.makeText(
//                                getBaseContext(),
//                                "Not Got Response From Server.",
//                                Toast.LENGTH_SHORT).show();
//                    }
//
//                }
//            };
//
//            // After call for background.start this run method call
//            public void run() {
//
//                System.out.println("get new data");
//
//                if(!Thread.currentThread().isInterrupted()) {
//                    try {
//                        String message;
//
//                            //Map<String, String> params = new HashMap<String, String>();
//                            JSONObject params = new JSONObject();
//                            params.put("reqType", "updateGame");
//                            params.put("username", Const.username);
//                            params.put("gameID", Const.gameID);
//
//                            int i = 0;
//
////                            JSONObject json = new JSONObject();
////                            //while not at end of hex array
////                            Hex_data hexData = HexMap.getRenderer().HexBoard[0].getHexData();
////                            while (i < numHexes)
////                            {
////                                try {
////                                    json.put(String.valueOf(i) + "hex" + "U1", String.valueOf(hexData.get_swords().size()));
////                                    json.put(String.valueOf(i) + "hex" + "U2", String.valueOf(hexData.get_archers().size()));
////                                    json.put(String.valueOf(i) + "hex" + "U3", String.valueOf(hexData.get_horses().size()));
////                                    json.put(String.valueOf(i) + "hex" + "Terrain", String.valueOf(hexData.get));
////                                    json.put(String.valueOf(i) + "hex" + "Structure", String.valueOf(hexData.get_buildings()));
////                                    json.put(String.valueOf(i) + "hex" + "Owner", String.valueOf(hexData.get_User().id));
////                                } catch (JSONException e) {
////                                    e.printStackTrace();
////                                }
////                            }
////                            params.put("json", json.toString());
//
//                        final JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,
//                                Const.URL_JSON_OBJECT, params,
//                                new Response.Listener<JSONObject>() {
//                                    @Override
//                                    public void onResponse(JSONObject response) {
//                                        // response
//                                        Log.d("Response", response.toString());
//
//                                        System.out.println("json to string");
//                                        String message = response.toString();
//                                        if (message.contains("error")) {
//                                            //TODO
//                                        } else {
//                                            threadMsg(message);
//                                        }
//                                    }
//                                },
//                                new Response.ErrorListener() {
//                                    @Override
//                                    public void onErrorResponse(VolleyError error) {
//                                        // error
//                                        System.out.println("error from server");
//                                        Log.d(TAG, "Error.Response" + error.getMessage());
//                                        if (error instanceof TimeoutError) {
//                                            Log.e("Volley", "TimeoutError");
//                                        }else if(error instanceof NoConnectionError){
//                                            Log.e("Volley", "NoConnectionError");
//                                        } else if (error instanceof AuthFailureError) {
//                                            Log.e("Volley", "AuthFailureError");
//                                        } else if (error instanceof ServerError) {
//                                            Log.e("Volley", "ServerError");
//                                        } else if (error instanceof NetworkError) {
//                                            Log.e("Volley", "NetworkError");
//                                        } else if (error instanceof ParseError) {
//                                            Log.e("Volley", "ParseError");
//                                        }
//                                        //TODO
//                                    }
//                                }
//                        ) {
//                            @Override
//                            public Map<String, String> getHeaders() throws AuthFailureError {
//                                HashMap<String, String> headers = new HashMap<String, String>();
//                                headers.put("Content-Type", "application/json");
//                                return headers;
//                            }
//                            @Override
//                            protected Map<String, String> getParams() {
//                                Map<String, String> params = new HashMap<String, String>();
//                                params.put("reqType", "updateGame");
//                                params.put("username", Const.username);
//                                params.put("gameID", Const.gameID);
//
//                                int i = 0;
//
//                                JSONObject json = new JSONObject();
//                                //while not at end of hex array
//                                Hex_data hexData = HexMap.getRenderer().HexBoard[0].getHexData();
//                                while (i < numHexes)
//                                {
//                                    try {
//                                        json.put(String.valueOf(i) + "hex" + "U1", String.valueOf(hexData.get_swords().size()));
//                                        json.put(String.valueOf(i) + "hex" + "U2", String.valueOf(hexData.get_archers().size()));
//                                        json.put(String.valueOf(i) + "hex" + "U3", String.valueOf(hexData.get_horses().size()));
//                                        //json.put(String.valueOf(i) + "hex" + "Terrain", String.valueOf(hexData.get));
//                                        //json.put(String.valueOf(i) + "hex" + "Structure", String.valueOf(hexData.get_buildings()));
//                                        json.put(String.valueOf(i) + "hex" + "Owner", String.valueOf(hexData.get_User().id));
//                                    } catch (JSONException e) {
//                                        e.printStackTrace();
//                                    }
//                                }
//
//                                //params.put("json", json.toString());
//                                return params;
//                            }
//                        };
//                        AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
//                    } catch (Throwable t) {
//                        // just end the background thread
//                        Log.i("Animation", "Thread  exception " + t);
//                    }
//
//                    handler.postDelayed(this, 6000);
//                }
//            }
//
//            private void threadMsg(String msg) {
//
//                if (!msg.equals(null) && !msg.equals("")) {
//                    Message msgObj = handler.obtainMessage();
//                    Bundle b = new Bundle();
//                    b.putString("message", msg);
//                    msgObj.setData(b);
//                    handler.sendMessage(msgObj);
//                }
//            }
//
//        });
//
//        // Start Thread
//        background.start();  //After call start method thread called run Method
//    }

    public void ServerThread(){

        Toast.makeText(getBaseContext(),
                "Please wait, connecting to server.",
                Toast.LENGTH_SHORT).show();

        // Create Inner Thread Class
        background = new Thread(new Runnable() {


            // Define the Handler that receives messages from the thread and update the progress
            private final Handler handler = new Handler() {

                public void handleMessage(Message msg) {

                    String aResponse = msg.getData().getString("message");
                    JSONObject json = null;
                    try {
                        json = new JSONObject(aResponse);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }

                    if ((aResponse != null)) {

                        String res = null;
                        try {
                            res = json.get("gameID").toString();
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }

                        Toast.makeText(
                                getBaseContext(),
                                res,
                                Toast.LENGTH_SHORT).show();

                    }
                    else
                    {

                        // ALERT MESSAGE
                        Toast.makeText(
                                getBaseContext(),
                                "Not Got Response From Server.",
                                Toast.LENGTH_SHORT).show();
                    }

                }
            };

            // After call for background.start this run method call
            public void run() {

                if(!Thread.currentThread().isInterrupted()) {
                    try {
                        String message;

                        StringRequest strReq = new StringRequest(Request.Method.POST, Const.URL_POST_REQ,
                                new Response.Listener<String>() {
                                    @Override
                                    public void onResponse(String response) {
                                        // response
                                        Log.d("Response", response);

                                        String message = response;

                                        threadMsg(message);

                                    }
                                },
                                new Response.ErrorListener() {
                                    @Override
                                    public void onErrorResponse(VolleyError error) {
                                        // error
                                        System.out.println("error from server");
                                        Log.d(TAG, "Error.Response" + error.getMessage());
                                        if (error instanceof TimeoutError) {
                                            Log.e("Volley", "TimeoutError");
                                        }else if(error instanceof NoConnectionError){
                                            Log.e("Volley", "NoConnectionError");
                                        } else if (error instanceof AuthFailureError) {
                                            Log.e("Volley", "AuthFailureError");
                                        } else if (error instanceof ServerError) {
                                            Log.e("Volley", "ServerError");
                                        } else if (error instanceof NetworkError) {
                                            Log.e("Volley", "NetworkError");
                                        } else if (error instanceof ParseError) {
                                            Log.e("Volley", "ParseError");
                                        }

                                    }
                                }
                        ) {
                            @Override
                            protected Map<String, String> getParams() {
                                Map<String, String> params = new HashMap<String, String>();
                                params.put("reqType", "updateGame");
                                params.put("username", "username");//Const.username);
                                params.put("gameID", "gameID");

                                return params;
                            }
                        };
                        AppController.getInstance().addToRequestQueue(strReq, "string_req");

                    } catch (Throwable t) {
                        // just end the background thread
                        Log.i("Animation", "Thread  exception " + t);
                    }

                    handler.postDelayed(this, 6000);
                }
            }

            private void threadMsg(String msg) {

                if (!msg.equals(null) && !msg.equals("")) {
                    Message msgObj = handler.obtainMessage();
                    Bundle b = new Bundle();
                    b.putString("message", msg);
                    msgObj.setData(b);
                    handler.sendMessage(msgObj);
                }
            }

        });

        // Start Thread
        background.start();  //After call start method thread called run Method
    }
}
